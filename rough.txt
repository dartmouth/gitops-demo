To do:  create a repository in GitLab and commit code for basic website
        in Jenkins create a slave and connect it to the master
            and then create a Hello World job in Jenkins that runs on the slave

Go to "Gitlab Jenkins integration next steps:" for notes on setting up nginx proxy with gitlab and jenkins docker containers

4:06 PM 9/18/2018: 

Long-term goals
1.	Setup CI/CD pipeline between Git/Jenkins/Docker for a web app (https://portal.nidhi.com/)
2.	Configure GitLab similar to how we run production, including email notifications and SAML authentication
3.	Configure Jenkins similar to how we run production, including permissions based on OUD groups and multiple slaves for different jobs
4.	Create backup processes for GitLab and Jenkins and test a restore of each
5.	Upgrade GitLab, Jenkins, and plugins using the method we use for production
6.	Throw away the whole environment and build it from scratch in less than 10 minutes

Let's dig into #1 next. Here are the steps I propose:
1.	Create an Apache (httpd) container on your common network and reconfigure nginx to proxy traffic to this container on port 80 for https://portal.nidhi.com/. You will need to do three things: edit your hosts file, update the nginx config, run a new httpd container with the correct parameters. -DONE
2.	Create a git repository in https://git.nidhi.com/ for the portal web app. Add the public SSH key that you use for production (git.dartmouth.edu) to your account. Clone the empty repository using SSH (not HTTPS), add a README.md file, commit, and push. - DONE
3.	Create a simple HTML website consisting of at least two pages that have links that point back to each other. Feel free to add other links to things like your Jenkins/GitLab URLs and add some formatting. -DONE
4.	Create a Dockerfile based on httpd in your web app repo. Use the COPY command to take your HTML files and put them in the location Apache expects to find HTML content. Run a "docker build" command to create a new Docker image. -DONE
5.	Throw away the container you created in step 1 and run a new container based on the image you created in step 4. -DONE


#First create a network
    docker network create <common-ground>
# run commands
    docker run --detach `
    --name gitlab `
    --hostname localhost `
    --publish 30080:30080 `
    --publish 30022:22 `
    --network common-ground `
    --volume "/builds/$CI_PROJECT_PATH/mnt:/mnt" `
    --env GITLAB_OMNIBUS_CONFIG="external_url 'http://localhost:30080'; gitlab_rails['gitlab_shell_ssh_port']=22;" gitlab/gitlab-ce:9.1.0-ce.0
    
    docker run --detach `
    --name=jenkins-master `
    -p 8080:8080 `
    -p 50000:50000 `
    --network common-ground `
    --mount source=jenkins-log,target=/var/log/jenkins `
    --mount source=jenkins-data,target=/var/jenkins_home jenkins

# Cloning the gitlab repository
Helps: https://askubuntu.com/questions/673597/ssh-connect-to-host-127-0-0-1-port-2222-connection-refused
Result:
git clone ssh://git@localhost:30022/root/hello-world.git


# create a docker network and while running the containers specify the network
    >docker network create test


# What to do when you want to reset your git password in Docker aka you forgot your git password

    #ssh inside the container
        >docker exec -it <container_name> bash
    
    #Log into your server with root privileges. Then start a Ruby on Rails console.
    #Start the console with this command:
        >gitlab-rails console production
    
    #Wait until the console has loaded.
    #There are multiple ways to find your user. You can search for email or username.
        >user = User.where(id: 1).first
    #or
        >user = User.find_by(email: '<email>')
    
    #Now you can change your password:
        >user.password = 'secret_pass'
        >user.password_confirmation = 'secret_pass'
    
    #Save the changes
        >user.save!

# When need to communicate between two containers

https://forums.docker.com/t/communicate-between-two-containers/38646/2

The best way to go about this is not to use --net=host but rather create a new docker network and connect both containers to that network. 
Containers on the same network can use the others container name to communicate with each other.

In your setup, you could do something like this:

docker network create mynet
docker run -d -p "80:80" --name web mywebimage
docker run -d --name my_service myapiimage
Then you can connect to your web service using the hostname of your raspberry pi and the web service can make calls to the API service with 
the URL http://my_service:8000/dosomething

# Quick check docker logs
    >docker logs <container_name>

    ##### Not the best way to make containers communicate with each other {
# Create a new docker container for both jenkins and gitlab specifying a network. So that they both are in the same network
    -> didn't have to do that because they are alreay in the same network 
    -> how did I check that they are in the same network?
        >docker network ls
        >docker network inspect <network name> # in my case network name was bridge
        # in the network inspect I saw that both my containers were present in the same network
        # copy paste gitlab's network IPV4 address and paste it in your jenkins console

        
        #####}

## Inside Jenkins
New Item
>Enter Item name
>select Freestyle Project
ok
Under Source Code Management
>select Git
>Repository URL : <http://gitlab:30080/root/hello-world.git>
>Credentials:     none
or
>Repository URL : <git@gitlab:root/hello-world.git>
>Credentials:     <git Windows SSH key>  # You will have to go to credentials and put your computer's private key in the credential manager and save it

---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------

Gitlab Jenkins integration next steps:

1) going to localhost on a port, spin up a nginx server that will proxy all web traffic (SSL)
    1.1) spin up a new nginx container running on port 80 and 443                                               ----DONE
    1.2) edit laptop host file and point 127.0.0.1 ( Edit-HostsFile)                                            ----DONE
    1.3) create a certificate authority file and then create a wild card certificate for hostfile entry
    1.4) update nginx configuration to use the wildcard certificate
    1.5) update the nginx configuration to proxy the traffic for gitlab and jenkins
2) jenkins slave installed in a docker container and connect it to the master
3) install powershell 6 in the slave


7:51 AM 9/5/2018:

########################################################
# Create certs
########################################################

cd C:\Users\F003R9N\Desktop

openssl genrsa -out ca.key 2048
openssl req -new -x509 -days 365 -key ca.key -subj "/C=US/ST=NH/L=Hanover/O=Dartmouth COllege/CN=Localhost Root CA" -out ca.crt

openssl req -newkey rsa:2048 -nodes -keyout nidhi_com.key -subj "/C=US/ST=NH/L=Hanover/O=Dartmouth College/CN=*.nidhi.com" -out nidhi_com.csr
openssl x509 -req -extfile C:\Users\F003R9N\Desktop\in.txt -days 365 -in nidhi_com.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out nidhi_com.crt

########################################################
# Trust the CA cert
########################################################

$CertPath = "C:\Users\f003r9n\Desktop\ca.crt"
Import-Certificate -FilePath $CertPath -CertStoreLocation "cert:\CurrentUser\Root"

########################################################
# Docker nginx
########################################################

$ConfigRoot = "C:\dartnotes\docker infrastructure setup\volumes\nginx"
docker run -d `
--name nginx `
--network=common-ground `
--restart unless-stopped `
-p 80:80 `
-p 443:443 `
-v $ConfigRoot\nginx.conf:/etc/nginx/nginx.conf:ro `
-v $ConfigRoot\nidhi_com.crt:/etc/nginx/nidhi_com.crt:ro `
-v $ConfigRoot\nidhi_com.key:/etc/nginx/nidhi_com.key:ro `
nginx

########################################################
# Docker Jenkins
########################################################

$ConfigRoot = "C:\dartnotes\docker infrastructure setup\volumes\jenkins-master"
docker run --detach `
--name jenkins-master `
--restart unless-stopped `
--env JENKINS_SLAVE_AGENT_PORT=50001 `
-v "$($ConfigRoot):/var/jenkins_home" `
-p 8080:8080 `
-p 38443:8443 `
-p 50001:50001 `
--network common-ground `
jenkins/jenkins:lts

########################################################
# Docker Gitlab
########################################################

# We can not have volumes hosted in windows directory because of permission issues. (As much as I remember, this is about gitlab image which makes the user as 'gitlab', not root. whereas in 
# order to trasfer volumes to moby linux virtual machine, it requires root privilege. The same problem with running Postgres as a database in docker containers on windows.
#( ----------------------------------------------------------------------------------------------------------

Attached are some notes from setting up git-dev.dartmouth.edu that might be useful. I think we should change from passing in app config parameters as 
environment variables and use the gitlab.rb file to configure things. We can't change the environment variables without throwing away the container and 
starting a new one, but we can change the gitlab.rb file and run the reconfigure command to have GitLab pick up the new settings. 

One approach would be to get GitLab to startup using default settings. Then enter the container, update gitlab.rb, update /etc/hosts and reconfigure 
GitLab. We'll need to do a few other things like generate certs as done in the attached notes. I'm hopeful that will get us up and running. 

Cheers, 
EWG

)
# Trust me that we did try a lot.
# Now let's create the volumes in mobylinux vm

docker volume create --name gitlab-config-volume -d local
docker volume create --name gitlab-logs-volume -d local
docker volume create --name gitlab-opt-volume -d local

docker run --detach `
--name gitlab `
--restart unless-stopped `
-p 8081:443 `
-p 8082:80 `
-p 4008:22 `
--network common-ground `
--volume "gitlab-config-volume:/etc/gitlab" `
--volume "gitlab-logs-volume:/var/log/gitlab" `
--volume "gitlab-opt-volume:/var/opt/gitlab" `
--hostname git.nidhi.com `
gitlab/gitlab-ce:10.8.3-ce.0

# Edit config
docker exec -it gitlab bash
nano /etc/gitlab/gitlab.rb

----------------------------------------------
########################################
# Customized configuration
external_url "https://git.nidhi.com"
gitlab_rails['gitlab_shell_ssh_port'] = 22

----------------------------------------------

# While still in the container, create a self-signed certificate

mkdir -p /etc/gitlab/ssl
chmod 700 /etc/gitlab/ssl

openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/gitlab/ssl/git.nidhi.com.key -out /etc/gitlab/ssl/git.nidhi.com.crt
US
New Hampshire
Hanover
Dartmouth College
<enter>
git.nidhi.com
nidhi.singh@dartmouth.edu

# reconfigure Omnibus GitLab 
gitlab-ctl reconfigure

---------------------------------------------------------------------------------------------------------------
-- 5) Claim the root account
---------------------------------------------------------------------------------------------------------------

https://git.nidhi.com

> New password: secure_pass
> Confirm new password: secure_pass

> Username or email: root
> Password: secure_pass

---------------------------------------------------------------------------------------------------------------
-- 6) Custom settings
---------------------------------------------------------------------------------------------------------------

To do the following:
- Disable sign-in
- Disable registration
- Disable git over http

Navigate to root > Admin area > settings
> Uncheck: Sign-in enabled
> Uncheck: Sign-up enabled
> Whitelisted domains for sign-ups: dartmouth.edu
> Enabled Git access protocols: Only SSH
Save

docker exec -it gitlab gitlab-ctl reconfigure


---------------------------------------------------------------------------------------------------------------
-- 7) Helpful commands
---------------------------------------------------------------------------------------------------------------

# Connect to container
docker exec -it gitlab bash

# Open gitlab console
gitlab-rails console

# Re-enable password authentication (needed to login in as root user)
ApplicationSetting.last.update_attributes(password_authentication_enabled: true)

# Create another admin account
user = User.find_by(username: 'd92495j')
user.admin = true
user.save!

########################################################
# Docker Apache httpd
########################################################

docker run --detach `
--name apache-httpd `
--restart unless-stopped `
-p 8086:80 `
--network common-ground `
httpd:alpine


docker run --detach `
--name portal `
--restart unless-stopped `
-p 8086:80 `
--network common-ground `
portal


-------------
########################################################
# Docker Jenkins Slave
########################################################

cd "C:\dartnotes\docker infrastructure setup\jenkins-slave"
docker build -t jenkins-slave .

docker run -d `
--name jenkins-slave1 `
--restart unless-stopped `
-e JENKINS_REMOTE_ROOT_DIR='/var/jenkins' `
-e JENKINS_JNLP_URL='http://jenkins-master:8080/computer/jenkins-slave01/slave-agent.jnlp' `
-e TZ=America/New_York `
-v /usr/local/bin/docker:/usr/bin/docker `
-v /var/run/docker.sock:/var/run/docker.sock `
-v "C:\dartnotes\docker infrastructure setup\volumes\jenkins-slave1:/var/jenkins" `
--network common-ground `
jenkins-slave